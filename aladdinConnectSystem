/*

Copyright 2020 - tomw

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

Change history:

2.0.0 - tomw and mikes - Update to new API flow and real-time events without polling
1.1.2 - tomw - Support both seconds and minutes for refreshInterval.
1.1.1 - tomw - Added Actuator for compatibility.
1.1.0 - tomw - Added support for multiple openers.
1.0.0 - tomw - Initial release.

 */

metadata
{
    definition(name: "Aladdin Connect System", namespace: "tomw", author: "tomw", importUrl: "")
    {
        capability "Actuator"
        capability "Configuration"
        capability "Initialize"
        capability "Refresh"
        
        attribute "commStatus", "string"
    }
}

preferences
{
    section
    {
        input name: "username", type: "text", title: "Username (email)", required: true
        input name: "password", type: "password", title: "Password", required: true
        input name: "refreshInterval", type: "number", title: "Refresh interval", defaultValue: 5
        input name: "refreshIntervalS", type: "bool", title: "Use seconds for refresh interval? (false for minutes)", defaultValue: false 
        input name: "logEnable", type: "bool", title: "Enable debug logging", defaultValue: false
    }
}

def logDebug(msg) 
{
    if (logEnable)
    {
        log.debug(msg)
    }
}

def updated()
{
    configure()
}

def configure()
{
    state.clear()    
    initialize()
}

def initialize()
{
    sendEvent(name: "commStatus", value: "unknown")
    try
    {
        // clear token so that login() 
        //   is guaranteed to happen in refresh()
        setToken(null)
        
        refresh()
        
        // we at least auth'ed correctly, but won't know
        //  event socket status until later
        sendEvent(name: "commStatus", value: "no events")
        
        closeWSS()
        runIn(5, connectWSS)   
    }
    catch (Exception e)
    {
        logDebug("initialize() failed: ${e.message}")
        sendEvent(name: "commStatus", value: "error")        

        reinitialize()
    }
}

def refresh()
{
    unschedule(refresh)
    
    refreshDoorInfo(true)
    
    // schedule next refresh
    runIn(refreshPeriod(), refresh)
}

def reinitialize()
{
    unschedule(initialize)
    
    // thanks @ogiewon for the example
    
    // first delay is 2 seconds, doubles every time
    def delayCalc = (state.reconnectDelay ?: 1) * 2    
    // upper limit is 600s
    def reconnectDelay = delayCalc <= 600 ? delayCalc : 600
    
    state.reconnectDelay = reconnectDelay
    runIn(reconnectDelay, initialize)
}

def connectWSS()
{
    def url = "wss://event-caster.st1.gdocntl.net/updates"
    def headers =
        [
            Authorization: "Bearer ${getToken()}"
        ]
    
    interfaces.webSocket.connect(url, headers: headers, ignoreSSLIssues: true)
}

def closeWSS()
{
    try
    {
        setWasExpectedClose(true)
        interfaces.webSocket.close()
    }
    catch (Exception e)
    {
        // swallow errors
    }
}

def webSocketStatus(String message)
{
    logDebug("webSocketStatus: ${message}")
    
    // thanks for the idea: https://community.hubitat.com/t/websocket-client/11843/15
    if(message.startsWith("status: open"))
    {        
        sendEvent(name: "commStatus", value: "good")
        
        state.reconnectDelay = 1
        setWasExpectedClose(false)
        
        return
    }
    else if(message.startsWith("status: closing"))
    {
        sendEvent(name: "commStatus", value: "no events")
        
        // wait for state to catch up
        pauseExecution(1000)
        
        if(getWasExpectedClose())
        {
            setWasExpectedClose(false)
            return
        }
        
        reinitialize()
        
        return
    }
    else if(message.startsWith("failure:"))
    {
        sendEvent(name: "commStatus", value: "error")        
        reinitialize()
        
        return
    }
}

def setWasExpectedClose(wasExpected)
{
    state.wasExpectedClose = wasExpected
}

def getWasExpectedClose()
{
    return state.wasExpectedClose
}

def parse(String message)
{
    logDebug("parse: ${message}")
    
    try
    {
        def event = new groovy.json.JsonSlurper().parseText(message)
        
        if(!event?.door_status)
        {
            // this is a non-door event, which we don't currently support
            return
        }
        
        def door = [legacy_id: event?.serial, door_number: event?.door, fault: event?.fault]
        
        manageDoorDevice(door)?.handleEvent(event)
    }
    catch(Exception e)
    {
        log.debug "Unrecognized message: ${message}"
    }    
}

def login(throwToCaller = false)
{
    def body = 
    [
        grant_type: "password",
        client_id: "1000",
        brand: "ALADDIN",
        username: java.net.URLEncoder.encode(username, "UTF-8"),
        password: password.getBytes("UTF-8").encodeBase64().toString(),        
        platform: "platform",
        app_version: "5.30",
        build_number: "2042",
        os_version: "12.0.0"
    ]
    
    try
    {
        
        httpPost(genParamsApi("oauth/token", "text", body))  
        { resp ->
            if(resp.data)
            {
                logDebug("token refreshed = ${resp.data}")
                
                setToken(resp.data.access_token)
                
                // schedule next login at 50% expiration plus 10 seconds
                def exp = ( ((resp.data.expires_in?.toInteger() * 0.5) + 10)?.intValue())
                
                unschedule(reinitialize)
                runIn(exp, reinitialize)
            }
        }
    }
    catch (Exception e)
    {
        logDebug("login failed: ${e}")

        // try again in 10 minutes
        unschedule(reinitialize)
        runIn(600, reinitialize)
        
        if(throwToCaller)
        { throw(e) }
    }
}

def get_devices()
{
    def resp = httpAccess("GET", genParamsApi("configuration", "text"))
    
    if(resp)
    {
        def doors = []
        
        for(device in resp.data.devices)
        {
            logDebug device            
            for(door in device.doors)
            {
                thisDoor = 
                    [
                        legacy_id: device.legacy_id?.toString(),
                        device_id: device.id,
                        door_number: door.door_index,
                        name: door.name,
                        status: door.status,
                        link_status: door.link_status,
                        ble_strength: door.ble_strength,
                        battery_level: door.battery_level,
                        fault: door.fault
                    ]
                
                doors += thisDoor                    
                manageDoorDevice(thisDoor)?.refreshFromMaster(thisDoor)
            }
        }
        
        setDevices(doors)
    }    
}

def refreshDoorInfo(throwToCaller = false)
{
    try
    {
        get_devices()
        return
    }
    catch (Exception e)
    {
        logDebug("refreshDoorInfo() failed: ${e}")
        sendEvent(name: "commStatus", value: "error")
        
        if(throwToCaller)
        { throw(e) }
    }
}

def operateDoor(deviceID, doorNum, op, throwToCaller = false)
{
    try
    {
        def payload = [command_key: (op == "open") ? "OpenDoor" : "CloseDoor"]
        httpAccess("POST", genParamsApi("devices/${deviceID}/door/${doorNum}/command", "json", payload))
    }
    catch (groovyx.net.http.HttpResponseException e)
    {
        switch(e.getResponse()?.getStatus()?.toInteger())
        {
            case 400:
                logDebug("operateDoor: command ignored due to lock status or opened/closed state")
                return
            
            default:
                logDebug("operateDoor unknown error: ${e}")
        }
    }
    catch (Exception e)
    {
        logDebug("operateDoor unknown error: ${e}")
        sendEvent(name: "commStatus", value: "error")
        
        if(throwToCaller)
        { throw(e) }
    }
}

def operateDoor(ch, op)
{
    if(ch)
    {
        def details = ch.getDeviceNetworkId().split('-')
        def deviceID = ch.getDataValue("device_id")
        operateDoor(deviceID, details?.getAt(1), op)
    }
}

void componentClose(ch)
{
    operateDoor(ch, "close")
}

void componentOpen(ch)
{
    operateDoor(ch, "open")
}

def refreshPeriod()
{
    def basePeriod = refreshInterval.toFloat().toInteger()
    
    return refreshIntervalS ? basePeriod : basePeriod * 60
}

def refreshFromChild()
{
    refreshDoorInfo()
}

def setToken(token)
{
    state.token = token
}

def getToken()
{
    return state.token
}

def setDevices(devices)
{
    state.devices = devices
}

def getDevices()
{
    return state.devices
}

def manageDoorDevice(door)
{
    // use existing child, or create it
    def child = 
        getChildDevice(childDoorName(door)) ?: 
        addChildDevice("Aladdin Connect Garage Door", childDoorName(door), [label:door.name, isComponent:false, name:"Aladdin Connect Garage Door"])
}

def childDoorName(door)
{
    return "AladdinConnectGarageDoor-${door.door_number}"
}

String toQueryString(Map m)
{
    return m.collect{ k, v -> "${k}=${v.toString()}" }.sort().join("&")
}

def genParamsApi(endpoint, type, body = null)
{
    def params =
        [
            uri: "https://pxdqkls7aj.execute-api.us-east-1.amazonaws.com/Android" + "/" + endpoint,
            headers:
            [
                AppVersion: '5.30',
                BundleName: 'com.geniecompany.AladdinConnect',
                'User-Agent': 'okhttp/3.12.1',
                'BuildVersion': '2042',
                'X-Api-Key': 'fkowarQ0dX9Gj1cbB9Xkx1yXZkd6bzVn5x24sECW',
                'Content-Type': (type == "text") ? 'application/x-www-form-urlencoded' : 'application/json',
                Authorization: "Bearer ${getToken()}"
            ],
            
            requestContentType: (type == "text") ? 'application/x-www-form-urlencoded' : 'application/json',
        ]
    
    if(body)
    {
        switch(type)
        {
            case "text":
                params.body = toQueryString(body)
                break
            
            case "json":
                params.body = new groovy.json.JsonOutput().toJson(body)
                break
        }
    }
 
    return params
}

def httpAccess(op, params)
{    
    def result = null
    
    logDebug("httpAccess(${op}, ${params})")
    
    def httpClosure = 
    { resp ->
        result = resp
        logDebug("result.data = ${result.data}")
    }
    
    def httpOp
    
    switch(op)
    {
        case "POST":
            httpOp = this.delegate.&httpPost
            break
        case "GET":
            httpOp = this.delegate.&httpGet
            break
    }
    
    try
    {
        httpOp(params, httpClosure)
    }
    catch (groovyx.net.http.HttpResponseException e)
    {
        if(e.getResponse()?.getStatus()?.toInteger() == 401)
        {
            // attempt to re-auth if necessary
            login()
            params['headers']['Authorization'] = "Bearer ${getToken()}"
            
            httpOp(params, httpClosure)
        }
    }
    
    return result
}
